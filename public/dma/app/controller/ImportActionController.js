/*
 * File: app/controller/ImportActionController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.ImportActionController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            autoCreate: true,
            ref: 'ImportActionPanel',
            selector: '#ImportActionPanel',
            xtype: 'importactionpanel'
        },
        {
            autoCreate: true,
            ref: 'ImportPanel',
            selector: '#ImportPanel',
            xtype: 'importpanel'
        }
    ],

    onImportActionEditButtonClick: function(button, e, eOpts) {
        panel = this.getImportActionPanel();

        formPanel = panel.getComponent('ImportActionFormPanel');
        toolbar = panel.getComponent('ImportActionToolbar');
        formPanel.enable();

        toolbar.getComponent('ImportActionEditButton').disable();
        toolbar.getComponent('ImportActionNewButton').disable();
        toolbar.getComponent('ImportActionCancelButton').enable();
        toolbar.getComponent('ImportActionSaveButton').enable();
        toolbar.getComponent('ImportActionDeleteButton').disable();

    },

    onImportActionNewButtonClick: function(button, e, eOpts) {
        console.log('new import action');

        store = Ext.getStore('ImportActionJsonStore');
        panel = this.getImportActionPanel();

        formPanel = panel.getComponent('ImportActionFormPanel');
        toolbar = panel.getComponent('ImportActionToolbar');
        if (store !== undefined) {
            //formPanel = button.ownerCt.ownerCt.ownerCt.query('#" . $name . "FormPanel')[0];
            formPanel.enable();
            record = new store.model();
            record.data.import_import_id = this.getImportPanel().getComponent('ImportImportGridPanel').getSelectionModel().getSelection()[0].data.id;
            formPanel.loadRecord(record);
            toolbar.getComponent('ImportActionEditButton').disable();
            toolbar.getComponent('ImportActionNewButton').disable();
            toolbar.getComponent('ImportActionCancelButton').enable();
            toolbar.getComponent('ImportActionSaveButton').enable();
            toolbar.getComponent('ImportActionDeleteButton').disable();

        }
    },

    onImportActionSaveButtonClick: function(button, e, eOpts) {
        store = Ext.getStore('ImportActionJsonStore');
        panel = this.getImportActionPanel();

        formPanel = panel.getComponent('ImportActionFormPanel');
        toolbar = panel.getComponent('ImportActionToolbar');

        //grid = button.ownerCt.ownerCt.ownerCt.query('#" . $name . "GridPanel')[0];

        record = formPanel.getForm().getRecord();
        if (record !== undefined && (record.data.id === undefined || record.data.id == 0)) {
            values = formPanel.getForm().getValues();
            record.set(values);
            store.insert(0, record);
            /*grid = button.ownerCt.ownerCt.ownerCt.getComponent('" . $name . 'GridPanel' . "');*/
            //if (grid !== undefined) {
            /*grid.getView().select(0);*/ /* BUG!!! */
            //}
        } else {
            formPanel.getForm().updateRecord();
        }
        formPanel.disable();
        toolbar.getComponent('ImportActionNewButton').enable();
        toolbar.getComponent('ImportActionCancelButton').disable();
        toolbar.getComponent('ImportActionSaveButton').disable();

        if (panel.getComponent('ImportActionGridPanel').getSelectionModel().getSelection().length > 0) {
            toolbar.getComponent('ImportActionEditButton').enable();
            toolbar.getComponent('ImportActionDeleteButton').enable();
        } else {
            toolbar.getComponent('ImportActionEditButton').disable();
            toolbar.getComponent('ImportActionDeleteButton').disable();
        }
    },

    onImportActionCancelButtonClick: function(button, e, eOpts) {
        panel = this.getImportActionPanel();
        grid = panel.getComponent('ImportActionGridPanel');

        formPanel = panel.getComponent('ImportActionFormPanel');
        toolbar = panel.getComponent('ImportActionToolbar');
        record = formPanel.getForm().getRecord();								
        if (record !== undefined) {
            formPanel.getForm().reset();
            formPanel.disable();

            toolbar.getComponent('ImportActionNewButton').enable();
            toolbar.getComponent('ImportActionCancelButton').disable();
            toolbar.getComponent('ImportActionSaveButton').disable();
            if (panel.getComponent('ImportActionGridPanel').getSelectionModel().getSelection().length > 0) {
                toolbar.getComponent('ImportActionEditButton').enable();
                toolbar.getComponent('ImportActionDeleteButton').enable();
            } else {
                toolbar.getComponent('ImportActionEditButton').disable();
                toolbar.getComponent('ImportActionDeleteButton').disable();
            }    
        }

        if(grid !== undefined && grid.getView().getNodes().length > 0) {
            grid.getView().select(0);
            record = grid.getSelectionModel().getSelection()[0];
            formPanel.getForm().loadRecord(record);
        }
    },

    onImportActionDeleteButtonClick: function(button, e, eOpts) {
        var store = Ext.getStore('ImportActionJsonStore');
        var panel = this.getImportActionPanel(); 
        var grid = panel.getComponent('ImportActionGridPanel');

        var that = this;

        Ext.Msg.confirm('Attention!', 'Datensatz lÃ¶schen?', function(btn) {
            if(btn == 'yes') {
                //grid = button.ownerCt.ownerCt.ownerCt.query('#" . $name . "GridPanel')[0];

                formPanel = panel.getComponent('ImportActionFormPanel');
                record = formPanel.getForm().getRecord();
                if (store !== undefined && record !== undefined) {
                    store.remove(record);
                    formPanel.getForm().reset();
                    if(grid !== undefined && grid.getView().getNodes().length > 0) {
                        grid.getView().select(0);
                    }
                }
            }
        });

        if (panel.getComponent('ImportActionGridPanel').getSelectionModel().getSelection().length > 0) {
            toolbar.getComponent('ImportActionDeleteButton').enable();
        } else {
            toolbar.getComponent('ImportActionDeleteButton').disable();
        }
    },

    onImportActionGridPanelSelect: function(rowmodel, record, index, eOpts) {
        panel = this.getImportActionPanel();

        formPanel = panel.getComponent('ImportActionFormPanel');
        toolbar = panel.getComponent('ImportActionToolbar');
        formPanel.getForm().loadRecord(record);
        toolbar.getComponent('ImportActionEditButton').enable();
        toolbar.getComponent('ImportActionNewButton').enable();
        toolbar.getComponent('ImportActionCancelButton').disable();
        toolbar.getComponent('ImportActionSaveButton').disable();
        toolbar.getComponent('ImportActionDeleteButton').enable();
    },

    init: function(application) {
        this.control({
            "#ImportActionEditButton": {
                click: this.onImportActionEditButtonClick
            },
            "#ImportActionNewButton": {
                click: this.onImportActionNewButtonClick
            },
            "#ImportActionSaveButton": {
                click: this.onImportActionSaveButtonClick
            },
            "#ImportActionCancelButton": {
                click: this.onImportActionCancelButtonClick
            },
            "#ImportActionDeleteButton": {
                click: this.onImportActionDeleteButtonClick
            },
            "#ImportActionGridPanel": {
                select: this.onImportActionGridPanelSelect
            }
        });
    }

});

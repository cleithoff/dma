/*
 * File: app/controller/ImportPanelController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.ImportPanelController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            autoCreate: true,
            ref: 'ImportPanel',
            selector: '#ImportPanel',
            xtype: 'importpanel'
        },
        {
            autoCreate: true,
            ref: 'ImportImportPanel',
            selector: '#ImportImportPanel',
            xtype: 'importimportpanel'
        },
        {
            autoCreate: true,
            ref: 'ImportActionPanel',
            selector: '#ImportActionPanel',
            xtype: 'importactionpanel'
        }
    ],

    onImportImportGridPanelSelect: function(rowmodel, record, index, eOpts) {
        var me = this;

        // ImportImport
        panel = this.getImportImportPanel();

        formPanel = panel.getComponent('FormPanel');
        toolbar = panel.getComponent('FormToolbar');
        formPanel.getForm().loadRecord(record);
        toolbar.getComponent('FormEditButton').enable();
        toolbar.getComponent('FormNewButton').enable();
        toolbar.getComponent('FormCancelButton').disable();
        toolbar.getComponent('FormSaveButton').disable();
        toolbar.getComponent('FormDeleteButton').enable();


        // ImportAction
        panel = this.getImportActionPanel();
        toolbar = panel.getComponent('ImportActionToolbar');

        toolbar.getComponent('ImportActionEditButton').disable();
        toolbar.getComponent('ImportActionNewButton').enable();
        toolbar.getComponent('ImportActionCancelButton').disable();
        toolbar.getComponent('ImportActionSaveButton').disable();
        toolbar.getComponent('ImportActionDeleteButton').disable();

        Ext.getStore('ImportActionJsonStore').clearFilter(true);
        Ext.getStore('ImportActionJsonStore').filter([{property:'import_import_id',value:record.data.id}]);

        // Import Parameter
        store = Ext.getStore('ImportParameterJsonStore');

        store.on('load', function(store, records) {
            var importParameterFormPanel = me.getImportPanel().down('#ImportParameterFormPanel');
            importParameterFormPanel.removeAll();

            var r = null;

            for(var idx in records) {
                r = records[idx];
                switch(r.data.report_filtertype.key) {
                    case 'string':
                    console.log('string');
                    config = JSON.parse(r.data.jsonparam);
                    console.log(config);
                    importParameterFormPanel.add(
                    Ext.create('Ext.form.field.Text', config)
                    );
                    break;
                    case 'int':
                    console.log('int');
                    config = JSON.parse(r.data.jsonparam);
                    console.log(config);
                    importParameterFormPanel.add(
                    Ext.create('Ext.form.field.Number', config)
                    );
                    break;
                    case 'combobox':
                    console.log('combobox');
                    config = JSON.parse(r.data.jsonparam);
                    console.log(config);
                    importParameterFormPanel.add(
                    Ext.create('Ext.form.field.ComboBox', config)
                    );
                    break;
                    case 'datetime':
                    console.log('datefield');
                    config = JSON.parse(r.data.jsonparam);
                    console.log(config);
                    importParameterFormPanel.add(
                    Ext.create('Ext.form.field.Date', config)
                    );
                    break;
                }
            }

        });

        store.clearFilter(true);
        store.filter([{property:"import_import_id",value:record.data.id}]);
        store.load();
    },

    init: function(application) {
        /*console.log('init')
        panel = this.getImportPanel().getComponent('ImportImportTabPanel').getComponent(this.getImportImportPanel().ref);
        if (panel === undefined) {
        panel = this.getImportImportPanel();
        console.log(panel);
        this.getImportPanel().getComponent('ImportImportTabPanel').add(panel);
        }

        this.getImportPanel().getComponent('ImportImportTabPanel').setActiveTab(this.getImportImportPanel());*/

        this.control({
            "#ImportImportGridPanel": {
                select: this.onImportImportGridPanelSelect
            }
        });
    }

});

/*
 * File: app/controller/CrudController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CrudController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            autoCreate: true,
            ref: 'MainPanel',
            selector: '#MainPanel',
            xtype: 'mainpanel'
        }
    ],

    onLinkButtonClick: function(button, e, eOpts, linkCallback) {
        console.log(eOpts.scope);

        var panel = eOpts.scope, //panel = button.up('#LinkPanel'),
            bag = panel.down('#BagGridPanel'),
            lib = panel.down('#LibGridPanel'),
            bagstore = bag.getStore(),
            libstore = lib.getStore(),
            linkrecord = panel.linkrecord
            ;

        librecord = lib.getSelectionModel().getSelection();

        if (Ext.isArray(librecord)) librecord = librecord[0];

        console.log(linkrecord, librecord);

        if (!Ext.isEmpty(linkrecord) && !Ext.isEmpty(librecord)) {
            var record = new bagstore.model(linkCallback(linkrecord, librecord));
            bagstore.insert(0, record);
        }


    },

    onUnlinkButtonClick: function(button, e, eOpts) {
        var panel = eOpts.scope, //panel = button.up('#LinkPanel'),
            bag = panel.down('#BagGridPanel'),
            lib = panel.down('#LibGridPanel'),
            bagstore = bag.getStore(),
            libstore = lib.getStore(),
            bagrecord = bag.getSelectionModel().getSelection()
            ;

        if (Ext.isArray(bagrecord) && bagrecord.length > 0) {
            bagrecord = bagrecord[0];
        }

        Ext.Msg.confirm('Achtung!', 'Datensatz löschen?', function(btn) {
            if(btn == 'yes') {
                if (bagstore !== undefined && bagrecord !== undefined) {
                    bagstore.remove(bagrecord);
                }
            }
        });
    },

    onNewButtonClick: function(button, e, eOpts, newCallback) {
        var panel = eOpts.scope, //button.up('#CrudPanel'),
            toolbar = panel.down('#ActionToolbar'),
            form = panel.down('#FormPanel'),
            grid = panel.down('#GridPanel'),
            store = grid.getStore()
            ;

        if (!Ext.isEmpty(store)) {
            form.enable();
            record = new store.model();
            if (!Ext.isEmpty(newCallback)) {
                newCallback(panel.masterRecord, record);
            }
            form.loadRecord(record);
            toolbar.getComponent('EditButton').disable();
            toolbar.getComponent('NewButton').disable();
            toolbar.getComponent('CancelButton').enable();
            toolbar.getComponent('SaveButton').enable();
            toolbar.getComponent('DeleteButton').disable();
        }
    },

    onEditButtonClick: function(button, e, eOpts) {
        var panel = eOpts.scope, //button.up('#CrudPanel'),
            toolbar = panel.down('#ActionToolbar'),
            form = panel.down('#FormPanel'),
            grid = panel.down('#GridPanel'),
            store = grid.getStore()
            ;

        form.enable();

        toolbar.getComponent('EditButton').disable();
        toolbar.getComponent('NewButton').disable();
        toolbar.getComponent('CancelButton').enable();
        toolbar.getComponent('SaveButton').enable();
        toolbar.getComponent('DeleteButton').disable();

    },

    onSaveButtonClick: function(button, e, eOpts) {
        var panel = eOpts.scope, //button.up('#CrudPanel'),
            toolbar = panel.down('#ActionToolbar'),
            form = panel.down('#FormPanel'),
            grid = panel.down('#GridPanel'),
            store = grid.getStore(),
            record = form.getForm().getRecord()
            ;

        if (!Ext.isEmpty(record) && (record.data.id === undefined || record.data.id === 0)) {
            var values = form.getForm().getValues();
            record.set(values);
            store.insert(0, record);
        } else {
            form.getForm().updateRecord();
        }
        form.disable();
        toolbar.getComponent('NewButton').enable();
        toolbar.getComponent('CancelButton').disable();
        toolbar.getComponent('SaveButton').disable();

        if (grid.getSelectionModel().getSelection().length > 0) {
            toolbar.getComponent('EditButton').enable();
            toolbar.getComponent('DeleteButton').enable();
        } else {
            toolbar.getComponent('EditButton').disable();
            toolbar.getComponent('DeleteButton').disable();
        }
    },

    onCancelButtonClick: function(button, e, eOpts) {
        var panel = eOpts.scope, //button.up('#CrudPanel'),
            toolbar = panel.down('#ActionToolbar'),
            form = panel.down('#FormPanel'),
            grid = panel.down('#GridPanel'),
            store = grid.getStore(),
            record = form.getForm().getRecord()
            ;								
            if (!Ext.isEmpty(record)) {
                form.getForm().reset();
            form.disable();

            toolbar.getComponent('NewButton').enable();
            toolbar.getComponent('CancelButton').disable();
            toolbar.getComponent('SaveButton').disable();
            if (grid.getSelectionModel().getSelection().length > 0) {
                toolbar.getComponent('EditButton').enable();
                toolbar.getComponent('DeleteButton').enable();
            } else {
                toolbar.getComponent('EditButton').disable();
                toolbar.getComponent('DeleteButton').disable();
            }    
        }
        /*
        if(!Ext.isEmpty(grid) && grid.getView().getNodes().length > 0) {
        grid.getView().select(0);
        record = grid.getSelectionModel().getSelection()[0];
        form.getForm().loadRecord(record);
        }

        */
    },

    onDeleteButtonClick: function(button, e, eOpts) {
        var panel = eOpts.scope, //button.up('#CrudPanel'),
            toolbar = panel.down('#ActionToolbar'),
            form = panel.down('#FormPanel'),
            grid = panel.down('#GridPanel'),
            store = grid.getStore(),
            record = form.getForm().getRecord()
            ;

        Ext.Msg.confirm('Achtung!', 'Datensatz löschen?', function(btn) {
            if(btn == 'yes') {
                if (store !== undefined && record !== undefined) {
                    store.remove(record);
                    form.getForm().reset();
                    if(grid !== undefined && grid.getView().getNodes().length > 0) {
                        grid.getView().select(0);
                        toolbar.getComponent('DeleteButton').enable();
                    } else {
                        toolbar.getComponent('DeleteButton').disable();
                    }
                }
            }
        });
    },

    onGridPanelSelect: function(rowmodel, record, index, eOpts) {
        var panel = eOpts.scope,
            toolbar = panel.down('#ActionToolbar'),
            form = panel.down('#FormPanel'),
            grid = panel.down('#GridPanel'),
            store = grid.getStore()
            ;

        form.getForm().loadRecord(record);
        toolbar.getComponent('EditButton').enable();
        toolbar.getComponent('NewButton').enable();
        toolbar.getComponent('CancelButton').disable();
        toolbar.getComponent('SaveButton').disable();
        toolbar.getComponent('DeleteButton').enable();
    },

    onMenuItemClick: function(item, e, eOpts) {
        var me = this;
        var panel = me.getMainPanel().getComponent('AppTabPanel').down(item.widget);

        if (Ext.isEmpty(panel)) {
            panel = Ext.createByAlias('widget.' + item.widget);    
            me.getMainPanel().getComponent('AppTabPanel').add(panel);
        }
        me.getMainPanel().getComponent('AppTabPanel').setActiveTab(panel);

        var grid = panel.down('#GridPanel');

        if (!Ext.isEmpty(grid)) {
            grid.getStore().load();
        }

        grid = panel.down('#LibGridPanel');

        if (!Ext.isEmpty(grid)) {
            grid.getStore().load();
        }


        return panel;
    }

});

/*
 * File: app/controller/PartnerImportPanelController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.PartnerImportPanelController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            autoCreate: true,
            ref: 'PartnerImportPanel',
            selector: '#PartnerImportPanel',
            xtype: 'partnerimportpanel'
        }
    ],

    onPartnerImportResetButtonClick: function(button, e, eOpts) {
        fp = this.getPartnerImportPanel().getComponent('PartnerImportUploadFormPanel');

        fp.getForm().reset();
    },

    onPartnerImportUploadButtonClick: function(button, e, eOpts) {
        var fp = this.getPartnerImportPanel().getComponent('PartnerImportUploadFormPanel');

        var that = this;

        if(fp.getForm().isValid()){
            fp.getForm().submit({
                url: '/import/fileupload/partner',
                waitMsg: 'Datei wird hochgeladen...',
                success: function(fp, o){
                    Ext.Msg.show({
                        title: 'Datei-Upload',
                        msg: o.result.msg,
                        minWidth: 200,
                        modal: true,
                        icon: Ext.Msg.INFO,
                        buttons: Ext.Msg.OK
                    });
                    if (o.result.success === true) {
                        Ext.Ajax.request({
                            url: '/import/import/partner',
                            params: {
                                filename: o.result.filename
                            },
                            success: function(response, opts) {
                                //var obj = Ext.decode(response.responseText);
                                //console.dir(obj);
                                Ext.getStore('ImportPartnerTreeStore').reload();
                            },
                            failure: function(response, opts) {
                                //console.log('server-side failure with status code ' + response.status);
                            }
                        });
                    }
                }
            });
        }
    },

    onPartnerImportImportButtonClick: function(button, e, eOpts) {
        Ext.Ajax.request({
            url: '/import/partner/import',
            /*params: {
            },*/
            success: function(response, opts) {
                //var obj = Ext.decode(response.responseText);
                //console.dir(obj);
                //Ext.getStore('ImportPartnerTreeStore').removeAll();
                //Ext.getStore('ImportPartnerTreeStore').sync();
                Ext.getStore('ImportPartnerTreeStore').reload();
            },
            failure: function(response, opts) {
                //console.log('server-side failure with status code ' + response.status);
            }
        });
    },

    init: function(application) {
        this.control({
            "#PartnerImportResetButton": {
                click: this.onPartnerImportResetButtonClick
            },
            "#PartnerImportUploadButton": {
                click: this.onPartnerImportUploadButtonClick
            },
            "#PartnerImportImportButton": {
                click: this.onPartnerImportImportButtonClick
            }
        });
    }

});

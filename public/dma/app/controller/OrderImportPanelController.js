/*
 * File: app/controller/OrderImportPanelController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.OrderImportPanelController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            autoCreate: true,
            ref: 'OrderImportPanel',
            selector: '#OrderImportPanel',
            xtype: 'orderimportpanel'
        }
    ],

    onOrderImportResetButtonClick: function(button, e, eOpts) {
        fp = this.getOrderImportPanel().getComponent('OrderImportUploadFormPanel');

        fp.getForm().reset();
    },

    onOrderImportUploadButtonClick: function(button, e, eOpts) {
        var fp = this.getOrderImportPanel().getComponent('OrderImportUploadFormPanel');

        var that = this;

        //if(fp.getForm().isValid()){
        fp.getForm().submit({
            url: '/import/fileupload/order',
            waitMsg: 'Datei wird hochgeladen...',
            success: function(x, o){
                Ext.Msg.show({
                    title: 'Datei-Upload',
                    msg: o.result.msg,
                    minWidth: 200,
                    modal: true,
                    icon: Ext.Msg.INFO,
                    buttons: Ext.Msg.OK
                });
                if (o.result.success === true) {
                    Ext.Ajax.request({
                        url: '/import/import/order',
                        timeout: 60 * 10 * 1000, // 10 min
                        params: {
                            filename: o.result.filename,
                            product_item_id: fp.getComponent('OrderImportItemComboBox').getValue(),
                        },
                        success: function(response, opts) {
                            //var obj = Ext.decode(response.responseText);
                            //console.dir(obj);
                            store = Ext.getStore('ImportOrderTreeStore');
                            store.getProxy().setExtraParam('product_item_id', that.getOrderImportPanel().getComponent('OrderImportUploadFormPanel').getComponent('OrderImportItemComboBox').getValue());
                            store.reload();
                        },
                        failure: function(response, opts) {
                            //console.log('server-side failure with status code ' + response.status);
                        }
                    });
                } else {
                    alert('Upload fehlgeschlagen. Bitte die Datei schließen, falls diese noch geöffnet ist.');
                }
            },
            failure: function(x,o) {
                alert('Upload fehlgeschlagen. Bitte die Datei schließen, falls diese noch geöffnet ist.');
            }
        });
        //}
    },

    onOrderImportImportButtonClick: function(button, e, eOpts) {
        var that = this;

        Ext.Ajax.request({
            url: '/import/order/import',
            method: 'GET',
            params: {
                import_import_id: this.getOrderImportPanel().getComponent('OrderImportUploadFormPanel').getComponent('ImportImportComboBox').getValue(),
                product_product_id: this.getOrderImportPanel().getComponent('OrderImportUploadFormPanel').getComponent('OrderImportProductComboBox').getValue(),
                product_item_id: this.getOrderImportPanel().getComponent('OrderImportUploadFormPanel').getComponent('OrderImportItemComboBox').getValue(),
                haspos: this.getOrderImportPanel().getComponent('OrderImportUploadFormPanel').getComponent('OrderImportHasposCheckbox').getValue(),
                weightpos: this.getOrderImportPanel().getComponent('OrderImportUploadFormPanel').getComponent('OrderImportWeightposNumberfield').getValue(),
            },
            success: function(response, opts) {
                //var obj = Ext.decode(response.responseText);
                //console.dir(obj);
                //Ext.getStore('ImportOrderTreeStore').removeAll();
                //Ext.getStore('ImportOrderTreeStore').sync();
                store = Ext.getStore('ImportOrderTreeStore');
                store.getProxy().setExtraParam('product_item_id', that.getOrderImportPanel().getComponent('OrderImportUploadFormPanel').getComponent('OrderImportItemComboBox').getValue());
                store.reload();
            },
            failure: function(response, opts) {
                //console.log('server-side failure with status code ' + response.status);
            }
        });
    },

    onOrderImportRefreshButtonClick: function(button, e, eOpts) {
        store = Ext.getStore('ImportOrderTreeStore');
        store.getProxy().setExtraParam('product_item_id', this.getOrderImportPanel().getComponent('OrderImportUploadFormPanel').getComponent('OrderImportItemComboBox').getValue());
        store.reload();
    },

    init: function(application) {
        this.control({
            "#OrderImportResetButton": {
                click: this.onOrderImportResetButtonClick
            },
            "#OrderImportUploadButton": {
                click: this.onOrderImportUploadButtonClick
            },
            "#OrderImportImportButton": {
                click: this.onOrderImportImportButtonClick
            },
            "#OrderImportRefreshButton": {
                click: this.onOrderImportRefreshButtonClick
            }
        });
    }

});

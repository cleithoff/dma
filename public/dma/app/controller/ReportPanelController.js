/*
 * File: app/controller/ReportPanelController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.ReportPanelController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            autoCreate: true,
            ref: 'ReportPanel',
            selector: '#ReportPanel',
            xtype: 'reportpanel'
        },
        {
            autoCreate: true,
            ref: 'ReportReportPanel',
            selector: '#ReportReportPanel',
            xtype: 'reportreportpanel'
        }
    ],

    onReportReportGridPanelSelect: function(rowmodel, record, index, eOpts) {
        // ImportImport
        var that = this;

        panel = this.getReportReportPanel();

        formPanel = panel.getComponent('ReportReportFormPanel');
        toolbar = panel.getComponent('ReportReportToolbar');
        formPanel.getForm().loadRecord(record);
        toolbar.getComponent('ReportReportEditButton').enable();
        toolbar.getComponent('ReportReportNewButton').enable();
        toolbar.getComponent('ReportReportCancelButton').disable();
        toolbar.getComponent('ReportReportSaveButton').disable();
        toolbar.getComponent('ReportReportDeleteButton').enable();

        toolbar.getComponent('ReportReportPreviewButton').enable();
        toolbar.getComponent('ReportReportPrintButton').enable();
        toolbar.getComponent('ReportReportExportButton').enable();

        store = Ext.getStore('ReportFilterJsonStore');

        store.on('load', function(store, records) {
            filterFormPanel = that.getReportReportPanel().getComponent('ReportFilterFormPanel');
            filterFormPanel.removeAll();

            for(var idx in records) {
                r = records[idx];
                switch(r.data.report_filtertype.key) {
                    case 'combobox':
                    console.log('combobox');
                    config = JSON.parse(r.data.jsonparam);
                    console.log(config);
                    filterFormPanel.add(
                    Ext.create('Ext.form.field.ComboBox', config)
                    );
                    break;
                    case 'datetime':
                    console.log('datefield');
                    config = JSON.parse(r.data.jsonparam);
                    console.log(config);
                    filterFormPanel.add(
                    Ext.create('Ext.form.field.Date', config)
                    );
                    break;
                }
            }

        });

        store.clearFilter(true);
        store.filter([{property:"report_report_id",value:record.data.id}]);
        store.load();
    },

    init: function(application) {
        this.control({
            "#ReportReportGridPanel": {
                select: this.onReportReportGridPanelSelect
            }
        });
    }

});

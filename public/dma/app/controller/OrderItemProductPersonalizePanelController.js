/*
 * File: app/controller/OrderItemProductPersonalizePanelController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.OrderItemProductPersonalizePanelController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            autoCreate: true,
            ref: 'OrderItemProductPersonalizePanel',
            selector: '#OrderItemProductPersonalizePanel',
            xtype: 'orderitemproductpersonalizepanel'
        },
        {
            autoCreate: true,
            ref: 'OrderItemPanel',
            selector: '#OrderItemPanel',
            xtype: 'orderitempanel'
        }
    ],

    onOrderItemProductPersonalizeEditButtonClick: function(button, e, eOpts) {
        panel = this.getOrderItemProductPersonalizePanel();

        formPanel = panel.getComponent('OrderItemProductPersonalizeFormPanel');
        toolbar = panel.getComponent('OrderItemProductPersonalizeToolbar');
        formPanel.enable();

        toolbar.getComponent('OrderItemProductPersonalizeEditButton').disable();
        toolbar.getComponent('OrderItemProductPersonalizeNewButton').disable();
        toolbar.getComponent('OrderItemProductPersonalizeCancelButton').enable();
        toolbar.getComponent('OrderItemProductPersonalizeSaveButton').enable();
        toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').disable();

    },

    onOrderItemProductPersonalizeNewButtonClick: function(button, e, eOpts) {
        store = Ext.getStore('OrderItemHasProductPersonalizeJsonStore');
        panel = this.getOrderItemProductPersonalizePanel();

        formPanel = panel.getComponent('OrderItemProductPersonalizeFormPanel');
        toolbar = panel.getComponent('OrderItemProductPersonalizeToolbar');
        if (store !== undefined) {
            //formPanel = button.ownerCt.ownerCt.ownerCt.query('#" . $name . "FormPanel')[0];
            formPanel.enable();
            record = new store.model();
            record.data.order_item_id = this.getOrderItemPanel().getComponent('OrderItemGridPanel').getSelectionModel().getSelection()[0].data.id;
            formPanel.loadRecord(record);
            toolbar.getComponent('OrderItemProductPersonalizeEditButton').disable();
            toolbar.getComponent('OrderItemProductPersonalizeNewButton').disable();
            toolbar.getComponent('OrderItemProductPersonalizeCancelButton').enable();
            toolbar.getComponent('OrderItemProductPersonalizeSaveButton').enable();
            toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').disable();


            //Ext.getStore('OrderItemProductItemJsonStore').on('load', function(store, records, options){
            combobox = this.getOrderItemProductPersonalizePanel().getComponent('OrderItemProductPersonalizeFormPanel').getComponent('OrderItemProductPersonalizeComboBox');
            combobox.store.clearFilter();
            combobox.store.filter([{property:'product_layout_id',value:Ext.getStore('OrderItemProductItemJsonStore').first().data.product_layout_id}]);
            combobox.store.reload();
            //});

            //Ext.getStore('OrderItemProductItemJsonStore').clearFilter(true);
            //Ext.getStore('OrderItemProductItemJsonStore').filter([{property:'id',value:Ext.getStore('OrderItemProductItemJsonStore').first().data.id}]);
            //Ext.getStore('OrderItemProductItemJsonStore').load();    



        }
    },

    onOrderItemProductPersonalizeSaveButtonClick: function(button, e, eOpts) {
        store = Ext.getStore('OrderItemHasProductPersonalizeJsonStore');
        panel = this.getOrderItemProductPersonalizePanel();

        formPanel = panel.getComponent('OrderItemProductPersonalizeFormPanel');
        toolbar = panel.getComponent('OrderItemProductPersonalizeToolbar');

        //grid = button.ownerCt.ownerCt.ownerCt.query('#" . $name . "GridPanel')[0];

        record = formPanel.getForm().getRecord();
        if (record !== undefined && (record.data.id === undefined || record.data.id == 0)) {
            values = formPanel.getForm().getValues();
            record.set(values);
            store.insert(0, record);
            /*grid = button.ownerCt.ownerCt.ownerCt.getComponent('" . $name . 'GridPanel' . "');*/
            //if (grid !== undefined) {
            /*grid.getView().select(0);*/ /* BUG!!! */
            //}
        } else {
            formPanel.getForm().updateRecord();
        }
        formPanel.disable();
        toolbar.getComponent('OrderItemProductPersonalizeNewButton').enable();
        toolbar.getComponent('OrderItemProductPersonalizeCancelButton').disable();
        toolbar.getComponent('OrderItemProductPersonalizeSaveButton').disable();

        if (panel.getComponent('OrderItemProductPersonalizeGridPanel').getSelectionModel().getSelection().length > 0) {
            toolbar.getComponent('OrderItemProductPersonalizeEditButton').enable();
            toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').enable();
        } else {
            toolbar.getComponent('OrderItemProductPersonalizeEditButton').disable();
            toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').disable();
        }
    },

    onOrderItemProductPersonalizeCancelButtonClick: function(button, e, eOpts) {
        panel = this.getOrderItemProductPersonalizePanel();
        grid = panel.getComponent('OrderItemProductPersonalizeGridPanel');

        formPanel = panel.getComponent('OrderItemProductPersonalizeFormPanel');
        toolbar = panel.getComponent('OrderItemProductPersonalizeToolbar');
        record = formPanel.getForm().getRecord();								
        if (record !== undefined) {
            formPanel.getForm().reset();
            formPanel.disable();

            toolbar.getComponent('OrderItemProductPersonalizeNewButton').enable();
            toolbar.getComponent('OrderItemProductPersonalizeCancelButton').disable();
            toolbar.getComponent('OrderItemProductPersonalizeSaveButton').disable();
            if (grid.getSelectionModel().getSelection().length > 0) {
                toolbar.getComponent('OrderItemProductPersonalizeEditButton').enable();
                toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').enable();
            } else {
                toolbar.getComponent('OrderItemProductPersonalizeEditButton').disable();
                toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').disable();
            }    
        }

        if(grid !== undefined && grid.getSelectionModel().getSelection().length > 0) {
            record = grid.getSelectionModel().getSelection()[0];
            formPanel.getForm().loadRecord(record);
        }
    },

    onOrderItemProductPersonalizeDeleteButtonClick: function(button, e, eOpts) {
        var store = Ext.getStore('OrderItemHasProductPersonalizeJsonStore');
        var panel = this.getOrderItemProductPersonalizePanel(); 
        var grid = panel.getComponent('OrderItemProductPersonalizeGridPanel');

        var that = this;

        Ext.Msg.confirm('Attention!', 'Datensatz lÃ¶schen?', function(btn) {
            if(btn == 'yes') {
                //grid = button.ownerCt.ownerCt.ownerCt.query('#" . $name . "GridPanel')[0];

                formPanel = panel.getComponent('OrderItemProductPersonalizeFormPanel');
                record = formPanel.getForm().getRecord();
                if (store !== undefined && record !== undefined) {
                    store.remove(record);
                    formPanel.getForm().reset();
                    if(grid !== undefined && grid.getView().getNodes().length > 0) {
                        grid.getView().select(0);
                    }
                }
            }
        });

        if (panel.getComponent('OrderItemProductPersonalizeGridPanel').getSelectionModel().getSelection().length > 0) {
            toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').enable();
        } else {
            toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').disable();
        }
    },

    onOrderItemProductPersonalizeGridPanelSelect: function(rowmodel, record, index, eOpts) {
        panel = this.getOrderItemProductPersonalizePanel();

        formPanel = panel.getComponent('OrderItemProductPersonalizeFormPanel');
        toolbar = panel.getComponent('OrderItemProductPersonalizeToolbar');

        formPanel.getForm().loadRecord(record);
        toolbar.getComponent('OrderItemProductPersonalizeEditButton').enable();
        toolbar.getComponent('OrderItemProductPersonalizeNewButton').enable();
        toolbar.getComponent('OrderItemProductPersonalizeCancelButton').disable();
        toolbar.getComponent('OrderItemProductPersonalizeSaveButton').disable();
        toolbar.getComponent('OrderItemProductPersonalizeDeleteButton').enable();
    },

    onOrderItemProductPersonalizePanelActivate: function(component, eOpts) {

    },

    init: function(application) {
        this.control({
            "#OrderItemProductPersonalizeEditButton": {
                click: this.onOrderItemProductPersonalizeEditButtonClick
            },
            "#OrderItemProductPersonalizeNewButton": {
                click: this.onOrderItemProductPersonalizeNewButtonClick
            },
            "#OrderItemProductPersonalizeSaveButton": {
                click: this.onOrderItemProductPersonalizeSaveButtonClick
            },
            "#OrderItemProductPersonalizeCancelButton": {
                click: this.onOrderItemProductPersonalizeCancelButtonClick
            },
            "#OrderItemProductPersonalizeDeleteButton": {
                click: this.onOrderItemProductPersonalizeDeleteButtonClick
            },
            "#OrderItemProductPersonalizeGridPanel": {
                select: this.onOrderItemProductPersonalizeGridPanelSelect
            },
            "#OrderItemProductPersonalizePanel": {
                activate: this.onOrderItemProductPersonalizePanelActivate
            }
        });
    }

});

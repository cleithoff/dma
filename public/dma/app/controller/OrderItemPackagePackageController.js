/*
 * File: app/controller/OrderItemPackagePackageController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.OrderItemPackagePackageController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            autoCreate: true,
            ref: 'OrderItemPackagePackagePanel',
            selector: '#OrderItemPackagePackagePanel',
            xtype: 'orderitempackagepackagepanel'
        },
        {
            autoCreate: true,
            ref: 'OrderPanel',
            selector: '#OrderPanel',
            xtype: 'orderpanel'
        }
    ],

    onOrderItemPackagePackageEditButtonClick: function(button, e, eOpts) {
        var panel = this.getOrderItemPackagePackagePanel();

        var formPanel = panel.getComponent('OrderItemPackagePackageFormPanel');
        var toolbar = panel.getComponent('OrderItemPackagePackageToolbar');
        formPanel.enable();

        toolbar.getComponent('OrderItemPackagePackageEditButton').disable();
        //toolbar.getComponent('OrderItemPackagePackageNewButton').disable();
        toolbar.getComponent('OrderItemPackagePackageCancelButton').enable();
        toolbar.getComponent('OrderItemPackagePackageSaveButton').enable();
        toolbar.getComponent('OrderItemPackagePackageDeleteButton').disable();

    },

    onOrderItemPackagePackageSaveButtonClick: function(button, e, eOpts) {
        store = Ext.getStore('OrderItemPackagePackageJsonStore');
        panel = this.getOrderItemPackagePackagePanel();

        formPanel = panel.getComponent('OrderItemPackagePackageFormPanel');
        toolbar = panel.getComponent('OrderItemPackagePackageToolbar');

        //grid = button.ownerCt.ownerCt.ownerCt.query('#" . $name . "GridPanel')[0];

        record = formPanel.getForm().getRecord();
        if (record !== undefined && (record.data.id === undefined || record.data.id == 0)) {
            values = formPanel.getForm().getValues();
            record.set(values);
            store.insert(0, record);
            /*grid = button.ownerCt.ownerCt.ownerCt.getComponent('" . $name . 'GridPanel' . "');*/
            //if (grid !== undefined) {
            /*grid.getView().select(0);*/ /* BUG!!! */
            //}
        } else {
            formPanel.getForm().updateRecord();
        }
        formPanel.disable();
        //toolbar.getComponent('OrderItemPackagePackageNewButton').enable();
        toolbar.getComponent('OrderItemPackagePackageCancelButton').disable();
        toolbar.getComponent('OrderItemPackagePackageSaveButton').disable();

        if (panel.getComponent('OrderItemPackagePackageGridPanel').getSelectionModel().getSelection().length > 0) {
            toolbar.getComponent('OrderItemPackagePackageEditButton').enable();
            toolbar.getComponent('OrderItemPackagePackageDeleteButton').enable();
        } else {
            toolbar.getComponent('OrderItemPackagePackageEditButton').disable();
            toolbar.getComponent('OrderItemPackagePackageDeleteButton').disable();
        }
    },

    onOrderItemPackagePackageCancelButtonClick: function(button, e, eOpts) {
        panel = this.getOrderItemPackagePackagePanel();
        grid = panel.getComponent('OrderItemPackagePackageGridPanel');

        formPanel = panel.getComponent('OrderItemPackagePackageFormPanel');
        toolbar = panel.getComponent('OrderItemPackagePackageToolbar');
        record = formPanel.getForm().getRecord();								
        if (record !== undefined) {
            formPanel.getForm().reset();
            formPanel.disable();

            //toolbar.getComponent('OrderItemPackagePackageNewButton').enable();
            toolbar.getComponent('OrderItemPackagePackageCancelButton').disable();
            toolbar.getComponent('OrderItemPackagePackageSaveButton').disable();
            if (grid.getSelectionModel().getSelection().length > 0) {
                toolbar.getComponent('OrderItemPackagePackageEditButton').enable();
                toolbar.getComponent('OrderItemPackagePackageDeleteButton').enable();
            } else {
                toolbar.getComponent('OrderItemPackagePackageEditButton').disable();
                toolbar.getComponent('OrderItemPackagePackageDeleteButton').disable();
            }    
        }

    },

    onOrderItemPackagePackageDeleteButtonClick: function(button, e, eOpts) {
        var store = Ext.getStore('PackagePackageJsonStore');
        var panel = this.getOrderItemPackagePackagePanel(); 
        var grid = panel.getComponent('OrderItemPackagePackageGridPanel');

        var that = this;

        Ext.Msg.confirm('Attention!', 'Datensatz lÃ¶schen?', function(btn) {
            if(btn == 'yes') {
                //grid = button.ownerCt.ownerCt.ownerCt.query('#" . $name . "GridPanel')[0];

                formPanel = panel.getComponent('OrderItemPackagePackageFormPanel');
                record = formPanel.getForm().getRecord();
                if (store !== undefined && record !== undefined) {
                    store.remove(record);
                    formPanel.getForm().reset();
                    if(grid !== undefined && grid.getView().getNodes().length > 0) {
                        grid.getView().select(0);
                    }
                }
            }
        });

        if (panel.getComponent('OrderItemPackagePackageGridPanel').getSelectionModel().getSelection().length > 0) {
            toolbar.getComponent('OrderItemPackagePackageDeleteButton').enable();
        } else {
            toolbar.getComponent('OrderItemPackagePackageDeleteButton').disable();
        }
    },

    onOrderItemPackagePackageGridPanelSelect: function(rowmodel, record, index, eOpts) {
        //Ext.getStore('PackagePackageJsonStore').clearFilter(true);
        //Ext.getStore('PackagePackageJsonStore').filter([{property:'order_item_id',value:record.data.id}]);

        //Ext.getStore('PackagePackageJsonStore').clearFilter(true);
        //Ext.getStore('PackagePackageJsonStore').filter([{property:'order_item_id',value:record.data.id}]);

        var panel = this.getOrderItemPackagePackagePanel();

        var formPanel = panel.down('#OrderItemPackagePackageFormPanel');
        var toolbar = panel.getComponent('OrderItemPackagePackageToolbar');

        formPanel.getForm().loadRecord(record);
        toolbar.getComponent('OrderItemPackagePackageEditButton').enable();
        //toolbar.getComponent('OrderItemDetailNewButton').enable();
        toolbar.getComponent('OrderItemPackagePackageCancelButton').disable();
        toolbar.getComponent('OrderItemPackagePackageSaveButton').disable();
        toolbar.getComponent('OrderItemPackagePackageDeleteButton').enable();
    },

    onOrderItemPackagePackageGridPanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        grid = this.getOrderPanel().getComponent('OrderOrderGridPanel');

        if (grid.getSelectionModel().getSelection().length > 0) {
            order = grid.getSelectionModel().getSelection()[0];

            Ext.Ajax.request({
                url: '/partner/address/index',
                method: 'GET',
                success: function(response) {
                    partner_address = JSON.parse(response.responseText);
                    win = window.open('http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&zip=' + partner_address.data[0].post_plz + '&idc=' + record.data.sendingnumber,'_blank'); 
                    win.focus();
                },
                failure: function() {},
                params: { id: order.data.partner_partner.partner_address_id_delivery}
            });

        }


    },

    init: function(application) {
        this.control({
            "#OrderItemPackagePackageEditButton": {
                click: this.onOrderItemPackagePackageEditButtonClick
            },
            "#OrderItemPackagePackageSaveButton": {
                click: this.onOrderItemPackagePackageSaveButtonClick
            },
            "#OrderItemPackagePackageCancelButton": {
                click: this.onOrderItemPackagePackageCancelButtonClick
            },
            "#OrderItemPackagePackageDeleteButton": {
                click: this.onOrderItemPackagePackageDeleteButtonClick
            },
            "#OrderItemPackagePackageGridPanel": {
                select: this.onOrderItemPackagePackageGridPanelSelect,
                celldblclick: this.onOrderItemPackagePackageGridPanelCellDblClick
            }
        });
    }

});

/*
 * File: app/view/OrderItemPanel.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.OrderItemPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.orderitempanel',

    border: false,
    id: 'OrderItemPanel',
    layout: {
        type: 'border'
    },
    title: 'Artikel',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    region: 'west',
                    split: true,
                    border: false,
                    itemId: 'OrderItemGridPanel',
                    width: 300,
                    store: 'OrderItemJsonStore',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            hidden: true,
                            dataIndex: 'id',
                            text: 'OrderItemID',
                            format: '0'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (Ext.isEmpty(record.data.product_product)) return '';
                                return record.data.product_product.title;
                            },
                            dataIndex: 'product_item.title',
                            text: 'Produkt',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (Ext.isEmpty(record.data.product_item)) return '';
                                return record.data.product_item.title;
                            },
                            dataIndex: 'product_item.title',
                            text: 'Artikel',
                            flex: 1
                        },
                        {
                            xtype: 'numbercolumn',
                            width: 70,
                            align: 'right',
                            dataIndex: 'amount',
                            text: 'Menge',
                            format: '0',
                            editor: {
                                xtype: 'numberfield',
                                allowDecimals: false,
                                allowExponential: false,
                                decimalPrecision: 0
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (Ext.isEmpty(record.data.order_itemstate)) return '';
                                return record.data.order_itemstate.title;
                            },
                            width: 70,
                            dataIndex: 'order_itemstate.title',
                            text: 'Status'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'OrderItemJsonStore'
                        }
                    ],
                    plugins: [
                        Ext.create('Ext.grid.plugin.CellEditing', {
                            listeners: {
                                edit: {
                                    fn: me.onCellEditingEdit,
                                    scope: me
                                }
                            }
                        })
                    ]
                },
                {
                    xtype: 'tabpanel',
                    region: 'center',
                    split: true,
                    border: false,
                    itemId: 'OrderItemTabPanel'
                }
            ]
        });

        me.callParent(arguments);
    },

    onCellEditingEdit: function(editor, e, eOpts) {
        var me = this;

        if (editor.context.record.data.product_item_id == 2 || editor.context.record.data.product_item_id == 3) {
            Ext.Ajax.request({
                url: '/package/packageorder/refresh',
                method: 'GET',
                params: {"order_item_id":editor.context.record.data.id, "filter": JSON.stringify([{"property":"order_combine_id","value":me.record.data.order_combine_id}])},
                success: function(response, opts) {
                    var obj = Ext.decode(response.responseText);


                    var grid = me.ownerCt.down('#OrderPackagePackageorderGridPanel');
                    grid.store.clearFilter(true);
                    grid.store.filter([{property:'order_combine_id',value:me.record.data.order_combine_id}]);
                    grid.store.load();

                },
                failure: function(response, opts) {
                    console.log('server-side failure with status code ' + response.status);
                }
            });
        } else {
            Ext.Ajax.request({
                url: '/package/packageorder/refresh',
                method: 'GET',
                params: {"order_combine_id":me.record.data.order_combine_id,"filter": JSON.stringify([{"property":"order_combine_id","value":me.record.data.order_combine_id}])},
                success: function(response, opts) {
                    var obj = Ext.decode(response.responseText);


                    var grid = me.ownerCt.down('#OrderPackagePackageorderGridPanel');
                    grid.store.clearFilter(true);
                    grid.store.filter([{property:'order_combine_id',value:me.record.data.order_combine_id}]);
                    grid.store.load();

                },
                failure: function(response, opts) {
                    console.log('server-side failure with status code ' + response.status);
                }
            });
        }





        return editor;
    }

});
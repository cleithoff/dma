/*
 * File: app/view/OrderImportPanel.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.OrderImportPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.orderimportpanel',

    height: 484,
    itemId: 'OrderImportPanel',
    width: 400,
    autoDestroy: false,
    layout: {
        type: 'border'
    },
    title: 'Import',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    region: 'north',
                    height: 203,
                    itemId: 'OrderImportUploadFormPanel',
                    bodyPadding: 10,
                    standardSubmit: false,
                    items: [
                        {
                            xtype: 'filefield',
                            anchor: '100%',
                            itemId: 'OrderImportFileUpload',
                            fieldLabel: 'CSV Datei',
                            buttonText: 'Ausw√§hlen...'
                        },
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            itemId: 'ImportImportComboBox',
                            fieldLabel: 'Import',
                            displayField: 'title',
                            store: 'ImportImportJsonStore',
                            valueField: 'id'
                        },
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            itemId: 'OrderImportProductComboBox',
                            fieldLabel: 'Produkt',
                            name: 'product_product_id',
                            editable: false,
                            displayField: 'title',
                            store: 'ProductProductOrderImportJsonStore',
                            valueField: 'id',
                            listeners: {
                                select: {
                                    fn: me.onOrderImportProductComboBoxSelect,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            disabled: true,
                            itemId: 'OrderImportItemComboBox',
                            fieldLabel: 'Artikel',
                            name: 'product_item_id',
                            displayField: 'title',
                            queryMode: 'local',
                            store: 'ProductItemOrderImportJsonStore',
                            valueField: 'id'
                        },
                        {
                            xtype: 'checkboxfield',
                            anchor: '100%',
                            itemId: 'OrderImportHasposCheckbox',
                            hideEmptyLabel: false,
                            name: 'haspos',
                            boxLabel: 'POS',
                            inputValue: '1',
                            uncheckedValue: '0'
                        },
                        {
                            xtype: 'numberfield',
                            anchor: '100%',
                            itemId: 'OrderImportWeightposNumberfield',
                            fieldLabel: 'POS Gewicht',
                            name: 'weightpos',
                            value: 0.7
                        },
                        {
                            xtype: 'button',
                            itemId: 'OrderImportResetButton',
                            text: 'Reset',
                            listeners: {
                                click: {
                                    fn: me.onOrderImportResetButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'OrderImportUploadButton',
                            text: 'Upload',
                            listeners: {
                                click: {
                                    fn: me.onOrderImportUploadButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'OrderImportRefreshButton',
                            text: 'Aktualisieren',
                            listeners: {
                                click: {
                                    fn: me.onOrderImportRefreshButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'OrderImportImportButton',
                            text: 'Import',
                            listeners: {
                                click: {
                                    fn: me.onOrderImportImportButtonClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'treepanel',
                    region: 'center',
                    itemId: 'OrderImportGridPanel',
                    collapsible: false,
                    title: 'Konflikte',
                    enableColumnHide: false,
                    enableColumnMove: false,
                    rowLines: true,
                    store: 'ImportOrderTreeStore',
                    useArrows: true,
                    viewConfig: {
                        getRowClass: function(record) {
                            if (record.isRoot()) return '';

                            //var me = this;

                            var product_item_id = me.down('#OrderImportItemComboBox').getValue();

                            //console.log(record.getRootNode().product_item_id);

                            //var product_item_id = 3;

                            if (record.data.leaf !== true) {
                                for (var idx in record.childNodes) {
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_anrede_fuer_hg_ng)) record.childNodes[idx].data.druck_anrede_fuer_hg_ng = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_hg_name1)) record.childNodes[idx].data.druck_hg_name1 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_hg_name2)) record.childNodes[idx].data.druck_hg_name2 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_hg_strasse)) record.childNodes[idx].data.druck_hg_strasse = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_hg_plz)) record.childNodes[idx].data.druck_hg_plz = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_hg_ort)) record.childNodes[idx].data.druck_hg_ort = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_hg_tel)) record.childNodes[idx].data.druck_hg_tel = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_ng_name1)) record.childNodes[idx].data.druck_ng_name1 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_ng_name2)) record.childNodes[idx].data.druck_ng_name2 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_ng_strasse)) record.childNodes[idx].data.druck_ng_strasse = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_ng_plz)) record.childNodes[idx].data.druck_ng_plz = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_ng_ort)) record.childNodes[idx].data.druck_ng_ort = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.druck_ng_tel)) record.childNodes[idx].data.druck_ng_tel = "";

                                    if (Ext.isEmpty(record.childNodes[idx].data.line1)) record.childNodes[idx].data.line1 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.line2)) record.childNodes[idx].data.line2 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.line3)) record.childNodes[idx].data.line3 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.line4)) record.childNodes[idx].data.line4 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.line5)) record.childNodes[idx].data.line5 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.line6)) record.childNodes[idx].data.line6 = "";
                                    if (Ext.isEmpty(record.childNodes[idx].data.line7)) record.childNodes[idx].data.line7 = "";

                                    if (Ext.isEmpty(record.data.druck_anrede_fuer_hg_ng)) record.data.druck_anrede_fuer_hg_ng = "";
                                    if (Ext.isEmpty(record.data.druck_hg_name1)) record.data.druck_hg_name1 = "";
                                    if (Ext.isEmpty(record.data.druck_hg_name2)) record.data.druck_hg_name2 = "";
                                    if (Ext.isEmpty(record.data.druck_hg_strasse)) record.data.druck_hg_strasse = "";
                                    if (Ext.isEmpty(record.data.druck_hg_plz)) record.data.druck_hg_plz = "";
                                    if (Ext.isEmpty(record.data.druck_hg_ort)) record.data.druck_hg_ort = "";
                                    if (Ext.isEmpty(record.data.druck_hg_tel)) record.data.druck_hg_tel = "";
                                    if (Ext.isEmpty(record.data.druck_ng_name1)) record.data.druck_ng_name1 = "";
                                    if (Ext.isEmpty(record.data.druck_ng_name2)) record.data.druck_ng_name2 = "";
                                    if (Ext.isEmpty(record.data.druck_ng_strasse)) record.data.druck_ng_strasse = "";
                                    if (Ext.isEmpty(record.data.druck_ng_plz)) record.data.druck_ng_plz = "";
                                    if (Ext.isEmpty(record.data.druck_ng_ort)) record.data.druck_ng_ort = "";
                                    if (Ext.isEmpty(record.data.druck_ng_tel)) record.data.druck_ng_tel = "";

                                    if (Ext.isEmpty(record.data.line1)) record.data.line1 = "";
                                    if (Ext.isEmpty(record.data.line2)) record.data.line2 = "";
                                    if (Ext.isEmpty(record.data.line3)) record.data.line3 = "";
                                    if (Ext.isEmpty(record.data.line4)) record.data.line4 = "";
                                    if (Ext.isEmpty(record.data.line5)) record.data.line5 = "";
                                    if (Ext.isEmpty(record.data.line6)) record.data.line6 = "";
                                    if (Ext.isEmpty(record.data.line7)) record.data.line7 = "";

                                    /*
                                    if (record.childNodes[idx].data.druck_anrede_fuer_hg_ng.trim() != record.data.druck_anrede_fuer_hg_ng.trim()) {
                                    record.forceDirty('druck_anrede_fuer_hg_ng');
                                    record.childNodes[idx].forceDirty('');
                                    }
                                    if (record.childNodes[idx].data.druck_hg_name1.trim() != record.data.druck_hg_name1.trim()) {record.forceDirty('druck_hg_name1');record.childNodes[idx].forceDirty('druck_hg_name1');}
                                    if (record.childNodes[idx].data.druck_hg_name2.trim() != record.data.druck_hg_name2.trim()) {record.forceDirty('druck_hg_name2');record.childNodes[idx].forceDirty('druck_hg_name2');}
                                    if (record.childNodes[idx].data.druck_hg_strasse.trim() != record.data.druck_hg_strasse.trim()) {record.forceDirty('druck_hg_strasse');record.childNodes[idx].forceDirty('druck_hg_strasse');}
                                    if (record.childNodes[idx].data.druck_hg_plz.trim() != record.data.druck_hg_plz.trim()) {record.forceDirty('druck_hg_plz');record.childNodes[idx].forceDirty('druck_hg_plz');}
                                    if (record.childNodes[idx].data.druck_hg_ort.trim() != record.data.druck_hg_ort.trim()) {record.forceDirty('druck_hg_ort');record.childNodes[idx].forceDirty('druck_hg_ort');}
                                    if (record.childNodes[idx].data.druck_hg_tel.trim() != record.data.druck_hg_tel.trim()) {record.forceDirty('druck_hg_tel');record.childNodes[idx].forceDirty('druck_hg_tel');}
                                    if (record.childNodes[idx].data.druck_ng_name1.trim() != record.data.druck_ng_name1.trim()) {record.forceDirty('druck_ng_name1');record.childNodes[idx].forceDirty('druck_ng_name1');}
                                    if (record.childNodes[idx].data.druck_ng_name2.trim() != record.data.druck_ng_name2.trim()) {record.forceDirty('druck_ng_name2');record.childNodes[idx].forceDirty('druck_ng_name2');}
                                    if (record.childNodes[idx].data.druck_ng_strasse.trim() != record.data.druck_ng_strasse.trim()) {record.forceDirty('druck_ng_strasse');record.childNodes[idx].forceDirty('druck_ng_strasse');}
                                    if (record.childNodes[idx].data.druck_ng_plz.trim() != record.data.druck_ng_plz.trim()) {record.forceDirty('druck_ng_plz');record.childNodes[idx].forceDirty('druck_ng_plz');}
                                    if (record.childNodes[idx].data.druck_ng_ort.trim() != record.data.druck_ng_ort.trim()) {record.forceDirty('druck_ng_ort');record.childNodes[idx].forceDirty('druck_ng_ort');}
                                    if (record.childNodes[idx].data.druck_ng_tel.trim() != record.data.druck_ng_tel.trim()) {record.forceDirty('druck_ng_tel');record.childNodes[idx].forceDirty('druck_ng_tel');}
                                    */

                                    if (product_item_id == 2) {
                                        if (
                                        record.childNodes[idx].data.druck_anrede_fuer_hg_ng.trim() != record.data.druck_anrede_fuer_hg_ng.trim()
                                        || record.childNodes[idx].data.druck_hg_name1.trim() != record.data.druck_hg_name1.trim()
                                        || record.childNodes[idx].data.druck_hg_name2.trim() != record.data.druck_hg_name2.trim()
                                        || record.childNodes[idx].data.druck_hg_strasse.trim() != record.data.druck_hg_strasse.trim()
                                        || record.childNodes[idx].data.druck_hg_plz.trim() != record.data.druck_hg_plz.trim()
                                        || record.childNodes[idx].data.druck_hg_ort.trim() != record.data.druck_hg_ort.trim()
                                        || record.childNodes[idx].data.druck_hg_tel.trim() != record.data.druck_hg_tel.trim()

                                        || record.childNodes[idx].data.druck_ng_name1.trim() != record.data.druck_ng_name1.trim()
                                        || record.childNodes[idx].data.druck_ng_name2.trim() != record.data.druck_ng_name2.trim()
                                        || record.childNodes[idx].data.druck_ng_strasse.trim() != record.data.druck_ng_strasse.trim()
                                        || record.childNodes[idx].data.druck_ng_plz.trim() != record.data.druck_ng_plz.trim()
                                        || record.childNodes[idx].data.druck_ng_ort.trim() != record.data.druck_ng_ort.trim()
                                        || record.childNodes[idx].data.druck_ng_tel.trim() != record.data.druck_ng_tel.trim()
                                        ) {
                                            //console.log(record.childNodes[idx].data);
                                            //console.log(record.data);
                                            return 'conflict';
                                        }
                                    }

                                    if (product_item_id == 3) {
                                        if (
                                        record.childNodes[idx].data.line1.trim() != record.data.line1.trim()
                                        || record.childNodes[idx].data.line2.trim() != record.data.line2.trim()
                                        || record.childNodes[idx].data.line3.trim() != record.data.line3.trim()
                                        || record.childNodes[idx].data.line4.trim() != record.data.line4.trim()
                                        || record.childNodes[idx].data.line5.trim() != record.data.line5.trim()
                                        || record.childNodes[idx].data.line6.trim() != record.data.line6.trim()
                                        || record.childNodes[idx].data.line7.trim() != record.data.line7.trim()

                                        ) {
                                            //console.log(record.childNodes[idx].data);
                                            //console.log(record.data);
                                            return 'conflict';
                                        }
                                    }


                                }
                            }

                            return '';

                        },
                        stripeRows: true,
                        rootVisible: false
                    },
                    columns: [
                        {
                            xtype: 'treecolumn',
                            minWidth: 150,
                            width: 150,
                            dataIndex: 'text',
                            text: 'Daten',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            minWidth: 70,
                            width: 70,
                            align: 'right',
                            dataIndex: 'anzahl',
                            text: 'Anzahl',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'post_anrede',
                            text: 'Anrede',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'post_name1',
                            text: 'Name1',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'post_name2',
                            text: 'Name2',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'post_strasse',
                            text: 'Strasse',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'post_plz',
                            text: 'PLZ',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'post_ort',
                            text: 'Ort',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_hg_name1',
                            text: 'HG Name1',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_hg_name2',
                            text: 'HG Name2',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_hg_strasse',
                            text: 'HG Strasse',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_hg_plz',
                            text: 'HG PLZ',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_hg_ort',
                            text: 'HG Ort',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_hg_tel',
                            text: 'HG Tel',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_ng_name1',
                            text: 'NG Name1',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_ng_name2',
                            text: 'NG Name2',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_ng_strasse',
                            text: 'NG Strasse',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_ng_plz',
                            text: 'NG PLZ',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_ng_ort',
                            text: 'NG Ort',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'druck_ng_tel',
                            text: 'NG Tel',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'line1',
                            text: 'Line1',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'line2',
                            text: 'Line2',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'line3',
                            text: 'Line3',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'line4',
                            text: 'Line4',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'line5',
                            text: 'Line5',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'line6',
                            text: 'Line6',
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'line7',
                            text: 'Line7',
                            editor: {
                                xtype: 'textfield'
                            }
                        }
                    ],
                    plugins: [
                        Ext.create('Ext.grid.plugin.CellEditing', {
                            listeners: {
                                beforeedit: {
                                    fn: me.onCellEditingBeforeEdit,
                                    scope: me
                                },
                                edit: {
                                    fn: me.onCellEditingEdit,
                                    scope: me
                                }
                            }
                        })
                    ],
                    selModel: Ext.create('Ext.selection.CellModel', {

                    })
                }
            ]
        });

        me.callParent(arguments);
    },

    onOrderImportProductComboBoxSelect: function(combo, records, eOpts) {
        var cb = combo.ownerCt.getComponent('OrderImportItemComboBox');

        cb.setValue('');
        cb.setDisabled(false);

        cb.store.reload({params: {product_product_id: records[0].data.id}});
    },

    onOrderImportResetButtonClick: function(button, e, eOpts) {
        var me = this,fp = me.down('#OrderImportUploadFormPanel');

        fp.getForm().reset();
    },

    onOrderImportUploadButtonClick: function(button, e, eOpts) {
        var me = this, fp = me.down('#OrderImportUploadFormPanel');

        //if(fp.getForm().isValid()){
        fp.getForm().submit({
            url: '/import/fileupload/order',
            waitMsg: 'Datei wird hochgeladen...',
            success: function(x, o){
                Ext.Msg.show({
                    title: 'Datei-Upload',
                    msg: o.result.msg,
                    minWidth: 200,
                    modal: true,
                    icon: Ext.Msg.INFO,
                    buttons: Ext.Msg.OK
                });
                if (o.result.success === true) {
                    var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Bitte warten Sie. Dieser Vorgang kann mehrere Minuten dauern!"});
                    myMask.show();
                    Ext.Ajax.request({
                        url: '/import/import/order',
                        timeout: 60 * 30 * 1000, // 30 min
                        params: {
                            filename: o.result.filename,
                            product_item_id: fp.down('#OrderImportItemComboBox').getValue(),
                        },
                        success: function(response, opts) {
                            var obj = Ext.decode(response.responseText);
                            //console.dir(obj);
                            if (obj.success == 0) {
                                Ext.Msg.show({
                                    title: 'Fehler',
                                    msg: obj.message,
                                    minWidth: 200,
                                    modal: true,
                                    icon: Ext.Msg.INFO,
                                    buttons: Ext.Msg.OK
                                });
                            } else {	
                                store = me.down('#OrderImportGridPanel').getStore(); //Ext.getStore('ImportOrderTreeStore');					
                                store.getProxy().setExtraParam('product_item_id', me.down('#OrderImportUploadFormPanel').getComponent('OrderImportItemComboBox').getValue());
                                store.getRootNode().removeAll();
                                store.load();
                            }
                            myMask.destroy();

                        },
                        failure: function(response, opts) {
                            myMask.destroy();
                            //console.log('server-side failure with status code ' + response.status);
                        }
                    });
                } else {
                    alert('Upload fehlgeschlagen. Bitte die Datei schlie√üen, falls diese noch ge√∂ffnet ist.');
                }
            },
            failure: function(x,o) {
                alert('Upload fehlgeschlagen. Bitte die Datei schlie√üen, falls diese noch ge√∂ffnet ist.');
            }
        });
        //}
    },

    onOrderImportRefreshButtonClick: function(button, e, eOpts) {
        var me = this;
        //store = Ext.getStore('ImportOrderTreeStore');
        store = me.down('#OrderImportGridPanel').getStore();
        store.getProxy().setExtraParam('product_item_id', me.down('#OrderImportUploadFormPanel').getComponent('OrderImportItemComboBox').getValue());
        store.getRootNode().removeAll();
        store.load();
    },

    onOrderImportImportButtonClick: function(button, e, eOpts) {
        var me = this;

        var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Bitte warten Sie. Dieser Vorgang kann mehrere Minuten dauern!"});
        myMask.show();

        Ext.Ajax.request({
            url: '/import/order/import',
            method: 'GET',
            timeout: 60 * 10 * 1000, // 10 min
            params: {
                import_import_id: me.down('#OrderImportUploadFormPanel').getComponent('ImportImportComboBox').getValue(),
                product_product_id: me.down('#OrderImportUploadFormPanel').getComponent('OrderImportProductComboBox').getValue(),
                product_item_id: me.down('#OrderImportUploadFormPanel').getComponent('OrderImportItemComboBox').getValue(),
                haspos: me.down('#OrderImportUploadFormPanel').getComponent('OrderImportHasposCheckbox').getValue(),
                weightpos: me.down('#OrderImportUploadFormPanel').getComponent('OrderImportWeightposNumberfield').getValue(),
            },
            success: function(response, opts) {
                //var obj = Ext.decode(response.responseText);
                //console.dir(obj);
                //Ext.getStore('ImportOrderTreeStore').removeAll();
                //Ext.getStore('ImportOrderTreeStore').sync();
                myMask.destroy();
                store = me.down('#OrderImportGridPanel').getStore(); //store = Ext.getStore('ImportOrderTreeStore');
                store.getProxy().setExtraParam('product_item_id', me.down('#OrderImportItemComboBox').getValue());
                store.getRootNode().removeAll();
                store.load();

            },
            failure: function(response, opts) {
                myMask.destroy();
                //console.log('server-side failure with status code ' + response.status);
            }
        });
    },

    onCellEditingBeforeEdit: function(editor, e, eOpts) {
        var _event = e;

        if (e.record.data.leaf === true) {

            e.record.parentNode.set(e.field, e.record.data[e.field]);

            console.log(e.record);

            var params = new Object();
            params.id = e.record.parentNode.data.idx;
            params.partner_nr = e.record.parentNode.data.partner_nr;
            params.key = e.field;
            params.value = e.record.data[e.field];

            Ext.Ajax.request({
                url: '/import/ordercompare',
                method: 'PUT',
                jsonData: JSON.stringify(params),
                success: function(response, opts) {
                    _event.record.parentNode.commit();
                },
                failure: function(response, opts) {
                    //console.log('server-side failure with status code ' + response.status);
                }
            });

            return false;
        }
    },

    onCellEditingEdit: function(editor, e, eOpts) {
        var _event = e;

        if (e.record.data.leaf === false) {

            console.log(e.record);

            var params = new Object();
            params.id = e.record.data.idx == "" ? 0 : e.record.data.idx;
            params.partner_nr = e.record.data.partner_nr;
            params.key = e.field;
            params.value = e.record.data[e.field];
            //params[e.field] = e.record.data[e.field];

            Ext.Ajax.request({
                url: '/import/ordercompare',
                method: 'PUT',
                jsonData: JSON.stringify(params),
                success: function(response, opts) {
                    _event.record.commit();
                },
                failure: function(response, opts) {
                    //console.log('server-side failure with status code ' + response.status);
                }
            });

            return false;
        }
    }

});
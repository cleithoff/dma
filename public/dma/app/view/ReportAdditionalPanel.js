/*
 * File: app/view/ReportAdditionalPanel.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.ReportAdditionalPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.reportadditionalpanel',

    height: 710,
    itemId: 'ReportAdditionalPanel',
    width: 753,
    layout: {
        type: 'border'
    },
    title: 'zusätzliche Daten',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    itemId: 'ReportAdditionalToolbar',
                    items: [
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'ReportAdditionalEditButton',
                            text: 'Bearbeiten',
                            listeners: {
                                click: {
                                    fn: me.onReportAdditionalEditButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'ReportAdditionalNewButton',
                            text: 'Neu',
                            listeners: {
                                click: {
                                    fn: me.onReportAdditionalNewButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'ReportAdditionalSaveButton',
                            text: 'Speichern',
                            listeners: {
                                click: {
                                    fn: me.onReportAdditionalSaveButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'ReportAdditionalCancelButton',
                            text: 'Abbrechen',
                            listeners: {
                                click: {
                                    fn: me.onReportAdditionalCancelButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'ReportAdditionalDeleteButton',
                            text: 'Löschen',
                            listeners: {
                                click: {
                                    fn: me.onReportAdditionalDeleteButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'ReportAdditionalPreviewButton',
                            text: 'Vorschau',
                            listeners: {
                                click: {
                                    fn: me.onReportAdditionalPreviewButtonClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'panel',
                    region: 'north',
                    split: true,
                    border: false,
                    height: 242,
                    itemId: 'MyPanel',
                    layout: {
                        type: 'border'
                    },
                    header: false,
                    title: 'My Panel',
                    items: [
                        {
                            xtype: 'gridpanel',
                            region: 'west',
                            split: true,
                            itemId: 'ReportAdditionalGridPanel',
                            width: 150,
                            header: false,
                            title: 'My Grid Panel',
                            store: 'ReportAdditionalJsonStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'title',
                                    text: 'zusätzliche Daten',
                                    flex: 1
                                }
                            ],
                            listeners: {
                                select: {
                                    fn: me.onReportAdditionalGridPanelSelect,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'form',
                            region: 'center',
                            split: true,
                            disabled: true,
                            itemId: 'ReportAdditionalFormPanel',
                            bodyPadding: 10,
                            items: [
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: 'Title',
                                    name: 'title'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: 'Kürzel',
                                    name: 'slug'
                                },
                                {
                                    xtype: 'textareafield',
                                    anchor: '100%',
                                    fieldLabel: 'Beschreibung',
                                    name: 'description'
                                },
                                {
                                    xtype: 'textareafield',
                                    anchor: '100%',
                                    fieldLabel: 'Query',
                                    name: 'sql'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: 'XML Gruppierung',
                                    name: 'xmlgrouping'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    region: 'center',
                    split: true,
                    itemId: 'ReportPreviewGridPanel',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            dataIndex: 'bool',
                            text: 'Boolean'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onReportAdditionalEditButtonClick: function(button, e, eOpts) {
        var panel = this;

        var formPanel = panel.down('#ReportAdditionalFormPanel');
        var toolbar = panel.down('#ReportAdditionalToolbar');
        formPanel.enable();

        toolbar.getComponent('ReportAdditionalEditButton').disable();
        toolbar.getComponent('ReportAdditionalNewButton').disable();
        toolbar.getComponent('ReportAdditionalCancelButton').enable();
        toolbar.getComponent('ReportAdditionalSaveButton').enable();
        toolbar.getComponent('ReportAdditionalDeleteButton').disable();

        toolbar.getComponent('ReportAdditionalPreviewButton').disable();
    },

    onReportAdditionalNewButtonClick: function(button, e, eOpts) {
        var panel = this;
        var formPanel = panel.down('#ReportAdditionalFormPanel');
        var toolbar = panel.down('#ReportAdditionalToolbar');
        var grid = panel.down('#ReportAdditionalGridPanel');
        var store = grid.getStore();

        if (store !== undefined) {
            formPanel.enable();
            record = new store.model();
            record.data.report_report_id = panel.record.data.id;
            formPanel.loadRecord(record);
            toolbar.getComponent('ReportAdditionalEditButton').disable();
            toolbar.getComponent('ReportAdditionalNewButton').disable();
            toolbar.getComponent('ReportAdditionalCancelButton').enable();
            toolbar.getComponent('ReportAdditionalSaveButton').enable();
            toolbar.getComponent('ReportAdditionalDeleteButton').disable();

            toolbar.getComponent('ReportAdditionalPreviewButton').disable();
        }

    },

    onReportAdditionalSaveButtonClick: function(button, e, eOpts) {
        var panel = this;
        var formPanel = panel.down('#ReportAdditionalFormPanel');
        var toolbar = panel.down('#ReportAdditionalToolbar');
        var grid = panel.down('#ReportAdditionalGridPanel');
        var store = grid.getStore();

        record = formPanel.getForm().getRecord();
        if (record !== undefined && (record.data.id === undefined || record.data.id == 0)) {
            values = formPanel.getForm().getValues();
            record.set(values);
            store.insert(0, record);
        } else {
            formPanel.getForm().updateRecord();
        }
        formPanel.disable();
        toolbar.getComponent('ReportAdditionalEditButton').enable();
        toolbar.getComponent('ReportAdditionalNewButton').enable();
        toolbar.getComponent('ReportAdditionalCancelButton').disable();
        toolbar.getComponent('ReportAdditionalSaveButton').disable();
        toolbar.getComponent('ReportAdditionalDeleteButton').enable();
        toolbar.getComponent('ReportAdditionalPreviewButton').enable();
    },

    onReportAdditionalCancelButtonClick: function(button, e, eOpts) {
        var panel = this;
        var formPanel = panel.down('#ReportAdditionalFormPanel');
        var toolbar = panel.down('#ReportAdditionalToolbar');
        var grid = panel.down('#ReportAdditionalGridPanel');
        var store = grid.getStore();

        var record = formPanel.getForm().getRecord();								
        if (record !== undefined) {
            formPanel.getForm().reset();
            formPanel.disable();
            toolbar.getComponent('ReportAdditionalEditButton').enable();
            toolbar.getComponent('ReportAdditionalNewButton').enable();
            toolbar.getComponent('ReportAdditionalCancelButton').disable();
            toolbar.getComponent('ReportAdditionalSaveButton').disable();

            toolbar.getComponent('ReportAdditionalPreviewButton').enable(); 
        }

        if(grid !== undefined && grid.getView().getNodes().length > 0) {
            grid.getView().select(0);
            record = grid.getSelectionModel().getSelection()[0];
            formPanel.getForm().loadRecord(record);
        }
    },

    onReportAdditionalDeleteButtonClick: function(button, e, eOpts) {
        var panel = this;
        var formPanel = panel.down('#ReportAdditionalFormPanel');
        var toolbar = panel.down('#ReportAdditionalToolbar');
        var grid = panel.down('#ReportAdditionalGridPanel');
        var store = grid.getStore();

        var that = this;

        Ext.Msg.confirm('Attention!', 'Datensatz löschen?', function(btn) {
            if(btn == 'yes') {

                var record = formPanel.getForm().getRecord();
                if (store !== undefined && record !== undefined) {
                    store.remove(record);
                    formPanel.getForm().reset();
                    if(grid !== undefined && grid.getView().getNodes().length > 0) {
                        grid.getView().select(0);
                    }
                }
            }
        });
    },

    onReportAdditionalPreviewButtonClick: function(button, e, eOpts) {
        var me = this;

        var panel = me;
        toolbar = panel.down('#ReportAdditionalToolbar');

        filterFormPanel = me.ownerCt.down('#ReportFilterFormPanel');

        params = filterFormPanel.getValues();

        params._sql = me.down('#ReportAdditionalFormPanel').getForm().findField('sql').getValue();

        Ext.Ajax.request({
            url: '/report/additional/meta',
            params: params,
            success: function(response, opts) {
                var obj = Ext.decode(response.responseText);
                me.remove(me.getComponent('ReportPreviewGridPanel'));
                columns = [];
                fields = [];
                for (var idx in obj.data) {
                    field = obj.data[idx];
                    switch(field.native_type) {
                        case 'LONG':
                        columns.push({
                            dataIndex: field.name,
                            align: 'right',
                            text: field.name,
                            xtype: 'numbercolumn',
                            format: '0'
                        });
                        fields.push({
                            name: field.name,
                            type: 'int',
                        });
                        break;
                        case 'VAR_STRING':
                        columns.push({
                            dataIndex: field.name,
                            align: 'left',
                            text: field.name,
                            xtype: 'gridcolumn'
                        });
                        fields.push({
                            name: field.name,
                            type: 'string',
                        });
                        break;
                        case 'BLOB':
                        columns.push({
                            dataIndex: field.name,
                            align: 'left',
                            text: field.name,
                            xtype: 'gridcolumn'
                        });
                        fields.push({
                            name: field.name,
                            type: 'string',
                        });                    
                        break;
                        default:
                        columns.push({
                            dataIndex: field.name,
                            align: 'left',
                            text: field.name,
                            xtype: 'gridcolumn'
                        });
                        fields.push({
                            name: field.name,
                            type: 'string',
                        });                    
                        break;
                    }
                }
                Ext.define('Meta', {
                    extend: 'Ext.data.Model',
                    fields: fields
                });

                var metaStore = Ext.create('Ext.data.Store', {
                    model: 'Meta',
                    proxy: {
                        type: 'rest',
                        url: '/report/additional/index',
                        extraParams: params,
                        reader: {
                            type: 'json',
                            root: 'data'
                        }
                    },
                    autoLoad: true,
                    pageSize: 1000000
                });
                var panel = Ext.create('Ext.grid.Panel', {
                    split: true,
                    region: 'center',
                    itemId: 'ReportPreviewGridPanel',
                    //title: 'Number Column Demo',
                    store: metaStore,
                    columns: columns,
                    dockedItems: [
                    {
                        xtype: 'pagingtoolbar',
                        dock: 'bottom',
                        displayInfo: true,
                        store: metaStore
                    }
                    ]
                    /*[
                    { text: 'Symbol',         dataIndex: 'symbol', flex: 1 },
                    { text: 'Current Price',  dataIndex: 'price',  renderer: Ext.util.Format.usMoney },
                    { text: 'Change',         dataIndex: 'change', xtype: 'numbercolumn', format:'0.00' },
                    { text: 'Volume',         dataIndex: 'volume', xtype: 'numbercolumn', format:'0,000' }
                    ]*/
                });


                me.add(panel);
                //toolbar.getComponent('ReportReportExecuteButton').enable();
            },
            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
            }
        });
    },

    onReportAdditionalGridPanelSelect: function(rowmodel, record, index, eOpts) {
        var me = this;
        var panel = me;
        var formPanel = panel.down('#ReportAdditionalFormPanel');
        var toolbar = panel.down('#ReportAdditionalToolbar');
        formPanel.getForm().loadRecord(record);
        toolbar.getComponent('ReportAdditionalEditButton').enable();
        toolbar.getComponent('ReportAdditionalNewButton').enable();
        toolbar.getComponent('ReportAdditionalCancelButton').disable();
        toolbar.getComponent('ReportAdditionalSaveButton').disable();
        toolbar.getComponent('ReportAdditionalDeleteButton').enable();

        toolbar.getComponent('ReportAdditionalPreviewButton').enable();
    }

});
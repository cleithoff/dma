/*
 * File: app/view/OrderItemOrderMetaPanel.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.OrderItemOrderMetaPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.orderitemordermetapanel',

    height: 250,
    itemId: 'OrderItemOrderMetaPanel',
    width: 400,
    title: 'Metadaten',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    itemId: 'OrderItemOrderMetaToolbar',
                    items: [
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'OrderItemOrderMetaEditButton',
                            text: 'Bearbeiten',
                            listeners: {
                                afterrender: {
                                    fn: me.onOrderItemOrderMetaEditButtonAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'OrderItemOrderMetaNewButton',
                            text: 'Neu',
                            listeners: {
                                afterrender: {
                                    fn: me.onOrderItemOrderMetaNewButtonAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'OrderItemOrderMetaSaveButton',
                            text: 'Speichern',
                            listeners: {
                                afterrender: {
                                    fn: me.onOrderItemOrderMetaSaveButtonAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'OrderItemOrderMetaCancelButton',
                            text: 'Abbrechen',
                            listeners: {
                                afterrender: {
                                    fn: me.onOrderItemOrderMetaCancelButtonAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'OrderItemOrderMetaDeleteButton',
                            text: 'Löschen',
                            listeners: {
                                afterrender: {
                                    fn: me.onOrderItemOrderMetaDeleteButtonAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'form',
                    disabled: true,
                    itemId: 'OrderItemOrderMetaFormPanel',
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'combobox',
                            anchor: '100%',
                            itemId: 'OrderMetaComboBox',
                            fieldLabel: 'Schlüssel',
                            name: 'order_meta_id',
                            displayField: 'title',
                            store: 'OrderMetaJsonStore',
                            valueField: 'id',
                            listeners: {
                                change: {
                                    fn: me.onOrderMetaComboBoxChange,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onOrderMetaComboBoxAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            fieldLabel: 'Wert',
                            name: 'value'
                        },
                        {
                            xtype: 'hiddenfield',
                            anchor: '100%',
                            itemId: 'OrderMetaKey',
                            fieldLabel: 'Label',
                            name: 'order_meta_key'
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    itemId: 'OrderItemOrderMetaGridPanel',
                    columnLines: true,
                    store: 'OrderItemHasOrderMetaJsonStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.data.order_meta.title;
                            },
                            width: 200,
                            dataIndex: 'order_meta.title',
                            text: 'Schlüssel'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'value',
                            text: 'Wert',
                            flex: 1
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onOrderItemOrderMetaEditButtonAfterRender: function(component, eOpts) {
        component.setVisible(MyApp.app.getRuleControllerController().allow('OrderItemOrderMetaPanel', MyApp.app.getRuleControllerController().rights.UPDATE));
    },

    onOrderItemOrderMetaNewButtonAfterRender: function(component, eOpts) {
        component.setVisible(MyApp.app.getRuleControllerController().allow('OrderItemOrderMetaPanel', MyApp.app.getRuleControllerController().rights.CREATE));
    },

    onOrderItemOrderMetaSaveButtonAfterRender: function(component, eOpts) {
        component.setVisible(MyApp.app.getRuleControllerController().allow('OrderItemOrderMetaPanel', MyApp.app.getRuleControllerController().rights.CREATE | MyApp.app.getRuleControllerController().rights.UPDATE));
    },

    onOrderItemOrderMetaCancelButtonAfterRender: function(component, eOpts) {
        component.setVisible(MyApp.app.getRuleControllerController().allow('OrderItemOrderMetaPanel', MyApp.app.getRuleControllerController().rights.CREATE | MyApp.app.getRuleControllerController().rights.UPDATE));
    },

    onOrderItemOrderMetaDeleteButtonAfterRender: function(component, eOpts) {
        component.setVisible(MyApp.app.getRuleControllerController().allow('OrderItemOrderMetaPanel', MyApp.app.getRuleControllerController().rights.DELETE));
    },

    onOrderMetaComboBoxChange: function(field, newValue, oldValue, eOpts) {
        var record = field.findRecordByValue(newValue);

        console.log(record);

        if (!Ext.isEmpty(record) && record !== false) {
            field.up('form').down('#OrderMetaKey').setValue(record.data.key);
        }



    },

    onOrderMetaComboBoxAfterRender: function(component, eOpts) {
        component.store.reload();
    }

});
/*
 * File: app/view/DlgDataTakeoverPanel.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.DlgDataTakeoverPanel', {
    extend: 'Ext.window.Window',
    alias: 'widget.dlgdatatakeoverpanel',

    itemId: 'DlgDataTakeoverPanel',
    layout: {
        type: 'border'
    },
    title: 'Datenübernahme aus vergangenen Bestellungen',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                me.processOrderItemTakeoverGridPanel({
                    xtype: 'gridpanel',
                    flex: 1,
                    region: 'center',
                    split: true,
                    itemId: 'OrderItemTakeoverGridPanel',
                    title: 'Bestellungen',
                    store: 'OrderItemJsonStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.data.order_order.incoming;
                            },
                            width: 120,
                            dataIndex: 'date',
                            text: 'Date'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.data.order_pool_id;
                            },
                            align: 'right',
                            dataIndex: 'string',
                            text: 'BestellID'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return record.data.import_stack.title;
                            },
                            dataIndex: 'number',
                            text: 'Stapel',
                            flex: 1
                        }
                    ],
                    viewConfig: {
                        getRowClass: function(record, rowIndex, rowParams, store) {
                            var me = this.ownerCt.up('window');
                            console.log(me.record, record);
                            if (me.record.data.id == record.data.id) return 'display-none';
                        }
                    },
                    selModel: Ext.create('Ext.selection.CheckboxModel', {
                        mode: 'SINGLE'
                    }),
                    listeners: {
                        select: {
                            fn: me.onOrderItemGridPanelSelect,
                            scope: me
                        }
                    },
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    boxLabel: 'alle anzeigen',
                                    listeners: {
                                        change: {
                                            fn: me.onCheckboxfieldChange,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }),
                {
                    xtype: 'panel',
                    flex: 1,
                    region: 'east',
                    split: true,
                    itemId: 'PreviewTakeoverPanel',
                    layout: {
                        type: 'border'
                    },
                    animCollapse: false,
                    collapsible: true,
                    title: 'Ansicht',
                    items: [
                        {
                            xtype: 'container',
                            region: 'center',
                            split: false,
                            itemId: 'PreviewContainerTakeover',
                            style: {
                                background: '#CCC'
                            }
                        }
                    ]
                },
                me.processOrderItemHasProductPersonalizeGridPanel({
                    xtype: 'gridpanel',
                    flex: 1,
                    region: 'east',
                    split: true,
                    itemId: 'OrderItemHasProductPersonalizeGridPanel',
                    width: 150,
                    animCollapse: false,
                    collapsed: true,
                    collapsible: true,
                    title: 'Personalisierungen',
                    store: 'OrderItemHasProductPersonalizeJsonStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            width: 120,
                            dataIndex: 'key',
                            text: 'Schlüssel',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'value',
                            text: 'Wert',
                            flex: 2
                        }
                    ]
                }),
                {
                    xtype: 'form',
                    region: 'south',
                    height: 99,
                    itemId: 'FormPanel',
                    bodyPadding: 10,
                    header: false,
                    title: 'My Form',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'CancelButton',
                                    text: 'Abbrechen',
                                    listeners: {
                                        click: {
                                            fn: me.onCancelButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'tbspacer',
                                    flex: 1
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'OkButton',
                                    text: 'Übernahme',
                                    listeners: {
                                        click: {
                                            fn: me.onOkButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'checkboxfield',
                            anchor: '100%',
                            itemId: 'PdfCheckbox',
                            value: 'pdf',
                            boxLabel: 'PDFs',
                            checked: true,
                            inputValue: 'pdf'
                        },
                        {
                            xtype: 'checkboxfield',
                            anchor: '100%',
                            itemId: 'PersonalizeCheckbox',
                            value: 'personalize',
                            boxLabel: 'Personalisierungen',
                            checked: true,
                            inputValue: 'personalize'
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onDlgDataTakeoverPanelAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    processOrderItemTakeoverGridPanel: function(config) {
        var me = this;

        config.store = Ext.create('MyApp.store.' + config.store);

        return config;
    },

    processOrderItemHasProductPersonalizeGridPanel: function(config) {
        var me = this;

        config.store = Ext.create('MyApp.store.' + config.store);

        return config;
    },

    onOrderItemGridPanelSelect: function(rowmodel, record, index, eOpts) {
        var me = this,
            store = me.down('#OrderItemHasProductPersonalizeGridPanel').getStore()
            ;

        store.clearFilter(true);
        store.filter([
        {property:"order_item_id", value: record.data.id}
        ]);
        store.load();

        me.down('#PreviewContainerTakeover').update('<embed src="/deploy/' + record.data.authkey + '.pdf?_dc=' + (new Date().getTime()) + '" alt="pdf" style="width:100%;height:100%" pluginspage="http://www.adobe.com/products/acrobat/readstep2.html">');
    },

    onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this,
            record = me.record,
            gridpanel = me.down('#OrderItemTakeoverGridPanel'),
            store = me.down('#OrderItemTakeoverGridPanel').getStore()
            ;

        store.clearFilter(true);

        console.log(newValue);

        if (newValue === true) {
            store.filter([
            {property:"partner_partner_id", value: record.data.partner_partner_id}
            ]);
        } else {
            store.filter([
            {property:"partner_partner_id", value: record.data.partner_partner_id},
            {property:"product_item_id", value: record.data.product_item_id}
            ]);
        }

        // store.load();

    },

    onCancelButtonClick: function(button, e, eOpts) {
        var me = this;

        me.close();
    },

    onOkButtonClick: function(button, e, eOpts) {
        var me = this,
            record = me.down('#OrderItemTakeoverGridPanel').getSelectionModel().getSelection()[0];

        if (Ext.isEmpty(record)) {
            me.close();
            return;
        }

        var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Bitte warten Sie. Die Daten werden übernommen!"});
        myMask.show();

        var creatorComponent = me.creatorComponent;
        var recordDst = me.record;

        var view = null;

        menu = creatorComponent.down('#OrderItemDetailToolbar').getComponent('OrderItemViewmodeButton').menu;
        menu.items.each(function(menuitem){ if(menuitem.checked){view=menuitem;} });

        if (view.suffix === undefined || view.suffix === null) {
            view.suffix = '';
        }

        Ext.Ajax.request({
            url: '/order/item/takeover',
            timeout: 1000 * 60 * 5,
            success: function(response, operation, success) {
                // console.log(response, operation, success);
                myMask.destroy();
                creatorComponent.down('#PreviewContainer').update('<embed src="/deploy/' + recordDst.data.authkey + view.suffix + '.pdf?_dc=' + (new Date().getTime()) + '" alt="pdf" style="width:100%;height:100%" pluginspage="http://www.adobe.com/products/acrobat/readstep2.html">');
            },
            failure: function() {
                myMask.destroy();
                Ext.MessageBox.alert('Fehler', 'Bei der Datenübernahme ist ein Fehler aufgetreten.');

            },
            params: { 
                iddst: recordDst.data.id,
                idsrc: record.data.id,
                pdf: me.down('#PdfCheckbox').getValue(),
                personalize: me.down('#PersonalizeCheckbox').getValue(),
            }
        });

        me.close();
    },

    onDlgDataTakeoverPanelAfterRender: function(component, eOpts) {
        var me = this,
            record = me.record,
            gridpanel = me.down('#OrderItemTakeoverGridPanel'),
            store = me.down('#OrderItemTakeoverGridPanel').getStore()
            ;

        store.clearFilter(true);
        store.filter([
        {property:"partner_partner_id", value: record.data.partner_partner_id},
        {property:"product_item_id", value: record.data.product_item_id}
        ]);
        store.load();




    }

});
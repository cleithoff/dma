/*
 * File: app/controller/%module%%controller%FormController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('%extjsmodule%App.controller.%module%%controller%FormController', {
    extend: 'Ext.app.Controller',

    models: [
        '%module%%controller%Model'
    ],
    stores: [
        '%module%%controller%JsonStore'
    ],
    views: [
        '%module%Viewport'
    ],

    onNewButtonClick: function(button, e, options) {
        store = Ext.getStore('%module%%controller%JsonStore');
        if (store !== undefined) {
        	record = new store.model();
        	Ext.getCmp('%module%%controller%Form').loadRecord(record);
        }
    },

    onSaveButtonClick: function(button, e, options) {
    	record = Ext.getCmp('%module%%controller%Form').getForm().getRecord();
    	if (record !== undefined && (record.data.id === undefined || record.data.id == 0)) {
    		values = Ext.getCmp('%module%%controller%Form').getForm().getValues();
    		record.set(values);
            store.insert(0, record);
            grid = Ext.getCmp('%module%%controller%GridPanel');
            if (grid !== undefined) {
                grid.getView().select(0);
            }    		
    	} else {
    		Ext.getCmp('%module%%controller%Form').getForm().updateRecord();
    	}

        /*

        // Saving with file upload.

        record = Ext.getCmp('%module%%controller%Form').getForm().getRecord();
        Ext.getCmp('%module%%controller%Form').getForm().submit({
            clientValidation: true,
            url: '/%module%/%controller%/upload',
            headers: {'Content-Type':'multipart/form-data; charset=UTF-8'},
            params: {
                newStatus: 'delivered',
                id: record.data.id
            },
            success: function(form, action) {
                files = action.result.files;
                var o = {};
                for (var index in files) {
                    o[index] = files[index];
                }
                Ext.getCmp('%module%%controller%Form').getForm().setValues(o);        
                Ext.getCmp('%module%%controller%Form').getForm().updateRecord();
                //Ext.Msg.alert('Success', action.result.msg);
            },
            failure: function(form, action) {
                switch (action.failureType) {
                    case Ext.form.action.Action.CLIENT_INVALID:
                    Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
                    break;
                    case Ext.form.action.Action.CONNECT_FAILURE:
                    Ext.Msg.alert('Failure', 'Ajax communication failed');
                    break;
                    case Ext.form.action.Action.SERVER_INVALID:
                    Ext.Msg.alert('Failure', action.result.msg);
                }
            }
        });

        */
    },

    onDeleteButtonClick: function(button, e, options) {
        Ext.Msg.confirm('Attention!', 'Really delete %controller%?', function(btn) {
            if(btn == 'yes') {
		        store = Ext.getStore('%module%%controller%JsonStore');
		        record = Ext.getCmp('%module%%controller%Form').getForm().getRecord();
		        if (store !== undefined && record !== undefined) {
		            store.remove(record);
		            Ext.getCmp('%module%%controller%Form').getForm().reset();
		
		            grid = Ext.getCmp('%module%%controller%GridPanel');
		            if(grid !== undefined && grid.getView().getNodes().length > 0) {
		                grid.getView().select(0);
		            }
		        }
            }
        });
    },

    init: function(application) {
        this.control({
            "#%module%%controller%NewButton": {
                click: this.onNewButtonClick
            },
            "#%module%%controller%SaveButton": {
                click: this.onSaveButtonClick
            },
            "#%module%%controller%DeleteButton": {
                click: this.onDeleteButtonClick
            }
        });
    }

});
